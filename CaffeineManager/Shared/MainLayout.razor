@using System.Globalization
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<PageTitle>咖啡管理</PageTitle>

<MApp Id="app" Class="*:font-sans w-full h-screen overflow-hidden transition-all">
    <MNavigationDrawer App Permanent Width="300" Floating
                       Class="border-r border-solid border-gray-200 [&:has(.theme--dark)]:border-gray-700 [&:has(.theme--dark)]:bg-[--m-theme-dark-surface] bg-[--m-theme-surface] p-4 transition-all">
        <div class="text-xl text-center font-bold py-4">@NavTitle</div>
        <MList Nav Routable>
            @foreach (var item in _routePathDefinitions)
            {
                <MListItem Href="@item.Path" ActiveClass="primary--text" Exact>
                    @if (!string.IsNullOrEmpty(item.Icon))
                    {
                        <MIcon Class="text-xl mr-2">@item.Icon</MIcon>
                    }
                    <MListItemContent>
                        <MListItemTitle>@item.Name</MListItemTitle>
                    </MListItemContent>
                </MListItem>
            }
        </MList>
    </MNavigationDrawer>

    <div class="flex flex-col">
        <MAppBar App Elevation="0"
                 Class="border-b border-solid bg-[--m-theme-surface] border-gray-200 [&:has(.theme--dark)]:border-gray-700 [&:has(.theme--dark)]:bg-[--m-theme-dark-surface] [&:not(.app--sized)]:left-[300px!important] transition-all">
            <div class="flex!">
                @if (!string.IsNullOrEmpty(_barIcon))
                {
                    <MIcon Class="text-2xl mr-2 font-bold">@_barIcon</MIcon>
                }
                <MToolbarTitle>@_barTitle</MToolbarTitle>
            </div>

        </MAppBar>

        <MMain Class="[&:not(.app--sized)]:pl-[300px!important] h-[calc(100vh-64px)]">
            <MErrorHandler>
                @Body
            </MErrorHandler>
        </MMain>
    </div>
</MApp>

@code {

    private class RouteItem
    {
        public required string Path { get; init; }
        public required string Name { get; init; }
        public string? Icon { get; init; }
    }

    [CascadingParameter(Name = "Culture")] public string? Culture { get; set; }
    private const string? NavTitle = "咖啡管理系统";
    private string? _barIcon, _barTitle;

    private readonly List<RouteItem> _routePathDefinitions =
    [
        new() { Path = "/", Name = "首页", Icon = "mdi-home" },
        new() { Path = "/caffeine-management", Name = "咖啡管理", Icon = "mdi-coffee" },
    ];

    protected override void OnInitialized()
    {
        UpdateBarInfo();
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateBarInfo();
    }

    private void UpdateBarInfo()
    {
        var realUri = NavigationManager.Uri[(NavigationManager.BaseUri.Length - 1)..];
        var routeObj = _routePathDefinitions.FirstOrDefault(x => x.Path == realUri);
        if (routeObj is null) return;
        _barIcon = routeObj.Icon;
        _barTitle = routeObj.Name;
        StateHasChanged();
    }

}