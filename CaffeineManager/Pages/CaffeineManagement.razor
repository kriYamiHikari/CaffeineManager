@page "/caffeine-management"
@using System.ComponentModel.DataAnnotations
@using CaffeineManager.Model
@inject ISqlSugarClient Db
@inject IPopupService PopupService

<div class="p-5">
    <MButton OnClick="TestFunction">test</MButton>
    <MDialog MaxWidth="600" @bind-Value="_updateDataDialogVisible" Persistent>
        <ChildContent>
            <MCard>
                <MCardTitle>添加数据</MCardTitle>
                <MCardText>
                    <MForm @ref="_updateDataForm" Model="_formModel" AutoLabel OnValidSubmit="UpdateData"
                           ValidateOn="ValidateOn.Blur">
                        <MTextField @bind-Value="_formModel.Brand" Placeholder="请输入品牌" Outlined></MTextField>
                        <MTextField @bind-Value="_formModel.Name" Placeholder="请输入名称" Outlined></MTextField>
                        <MSelect @bind-Value="_formModel.ItemType" Outlined Items="@_itemTypesData"
                                 ItemText="@(x => x.Text ?? "")" ItemValue="@(x => x.Id)"></MSelect>
                        <MTextField @bind-Value="_formModel.MinCaffeine" Placeholder="请输入最小咖啡因"
                                    Type="number" NumberProps="@(prop => { prop.Step = 0.01m; })"
                                    Outlined></MTextField>
                        <MTextField @bind-Value="_formModel.MaxCaffeine" Placeholder="请输入最大咖啡因"
                                    Type="number" NumberProps="@(prop => { prop.Step = 0.01m; })"
                                    Outlined></MTextField>
                        <MContainer>
                            <MRow>
                                <MSpacer></MSpacer>
                                <MButton Text OnClick="ResetForm">取消</MButton>
                                <MButton Text Type="submit">提交</MButton>
                            </MRow>
                        </MContainer>
                    </MForm>
                </MCardText>
            </MCard>
        </ChildContent>
    </MDialog>
    <MDialog MaxWidth="600" @bind-Value="_addDataDialogVisible" Persistent>
        <ActivatorContent>
            <MButton Class="custom-default-masa-btn" Elevation="0" @attributes="@context.Attrs">添加数据</MButton>
        </ActivatorContent>
        <ChildContent>
            <MCard>
                <MCardTitle>添加数据</MCardTitle>
                <MCardText>
                    <MForm @ref="_addDataForm" Model="_formModel" AutoLabel OnValidSubmit="AddData"
                           ValidateOn="ValidateOn.Blur">
                        <MTextField @bind-Value="_formModel.Brand" Placeholder="请输入品牌" Outlined></MTextField>
                        <MTextField @bind-Value="_formModel.Name" Placeholder="请输入名称" Outlined></MTextField>
                        <MSelect @bind-Value="_formModel.ItemType" Outlined Items="@_itemTypesData"
                                 ItemText="@(x => x.Text ?? "")" ItemValue="@(x => x.Id)"></MSelect>
                        <MTextField @bind-Value="_formModel.MinCaffeine" Placeholder="请输入最小咖啡因"
                                    Type="number" NumberProps="@(prop => { prop.Step = 0.01m; })"
                                    Outlined></MTextField>
                        <MTextField @bind-Value="_formModel.MaxCaffeine" Placeholder="请输入最大咖啡因"
                                    Type="number" NumberProps="@(prop => { prop.Step = 0.01m; })"
                                    Outlined></MTextField>
                        <MContainer>
                            <MRow>
                                <MSpacer></MSpacer>
                                <MButton Text OnClick="ResetForm">取消</MButton>
                                <MButton Text Type="submit">提交</MButton>
                            </MRow>
                        </MContainer>
                    </MForm>
                </MCardText>
            </MCard>
        </ChildContent>
    </MDialog>
    <MDialog MaxWidth="300" @bind-Value="_deleteDataDialogVisible" Persistent>
        <ActivatorContent>
            <MButton Class="custom-default-masa-btn" Elevation="0" @attributes="@context.Attrs">删除数据</MButton>
        </ActivatorContent>
        <ChildContent>
            <MCard>
                <MCardTitle>确认删除</MCardTitle>
                <MCardText>
                    <div>您确定要删除数据吗？</div>
                </MCardText>
                <MCardActions>
                    <MSpacer></MSpacer>
                    <MButton Text OnClick="@(() =>
                                           {
                                               _deleteDataDialogVisible = false;
                                               _singleDeleteId = null;
                                           })">取消
                    </MButton>
                    <MButton Text OnClick="HandleDeleteDialogConfirm">确认</MButton>
                </MCardActions>
            </MCard>
        </ChildContent>
    </MDialog>
    <MDataTable Headers="_tableHeaders" Items="_data" ShowSelect
                ItemKey="@(item => item.Id.ToString())" @bind-Selected="_selectedItems"
                ResizeMode="DataTableResizeMode.Independent">
        <ItemColContent>
            @switch (context.Header.Value)
            {
                default:
                    @context.Value
                    break;
                case "index":
                    var indexNum = _data.IndexOf(context.Item) + 1;
                    <span>@indexNum</span>
                    break;
                case "itemType":
                    <span>@context.Item.ItemType?.Text</span>
                    break;
                case "action":
                    <div>
                        <MIcon Class="cursor-pointer" OnClick="@(() =>
                                                               {
                                                                   _singleDeleteId = context.Item.Id;
                                                                   _deleteDataDialogVisible = true;
                                                               })">
                            mdi-delete
                        </MIcon>
                        <MIcon Class="cursor-pointer" OnClick="@(() =>
                                                               {
                                                                   _formModel = new CoffeeFormModel
                                                                   {
                                                                       Id = context.Item.Id,
                                                                       Brand = context.Item.Brand,
                                                                       Name = context.Item.Name,
                                                                       ItemType = context.Item.ItemType?.Id,
                                                                       MinCaffeine = context.Item.MinCaffeine ?? 0,
                                                                       MaxCaffeine = context.Item.MaxCaffeine ?? 0
                                                                   };
                                                                   _updateDataDialogVisible = true;
                                                               })">mdi-pencil
                        </MIcon>
                    </div>
                    break;
            }
        </ItemColContent>
    </MDataTable>
</div>

@code {

    private readonly List<DataTableHeader<Coffee>> _tableHeaders =
    [
        new() { Text = "#", Value = "index", Width = 60 },
        new() { Text = "品牌", Value = nameof(Coffee.Brand) },
        new() { Text = "名称", Value = nameof(Coffee.Name) },
        new() { Text = "类型", Value = "itemType" },
        new() { Text = "最小咖啡因", Value = nameof(Coffee.MinCaffeine) },
        new() { Text = "最大咖啡因", Value = nameof(Coffee.MaxCaffeine) },
        new() { Text = "其他操作", Value = "action", Width = 100 }
    ];

    public class CoffeeFormModel
    {
        public int Id { get; init; }

        [Required(ErrorMessage = "请输入品牌！")]
        [Display(Name = "品牌")]
        public string? Brand { get; set; }

        [Required(ErrorMessage = "请输入名称！")]
        [Display(Name = "名称")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "请输入物品类型！")]
        [Display(Name = "类型")]
        public int? ItemType { get; set; }

        [Display(Name = "最小咖啡因")] public decimal MinCaffeine { get; set; }
        [Display(Name = "最大咖啡因")] public decimal MaxCaffeine { get; set; }
    }

    private List<Coffee> _data = [];
    private List<ItemType> _itemTypesData = [];
    private MForm? _addDataForm;
    private MForm? _updateDataForm;
    private bool _addDataDialogVisible;
    private bool _updateDataDialogVisible;
    private bool _deleteDataDialogVisible;
    private IEnumerable<string> _selectedItems = [];
    private int? _singleDeleteId;
    private CoffeeFormModel _formModel = new();

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private void ResetForm()
    {
        _addDataForm?.Reset();
        _updateDataForm?.Reset();
        if (_addDataDialogVisible)
        {
            _addDataDialogVisible = false;
        }

        if (_updateDataDialogVisible)
        {
            _updateDataDialogVisible = false;
        }
    }

    private async Task TestFunction()
    {
        await PopupService.EnqueueSnackbarAsync($"{_formModel.ItemType}");
    }

    private async Task GetData()
    {
        _data = await Db.Queryable<Coffee>().Includes(x => x.ItemType).ToListAsync();
        _itemTypesData = await Db.Queryable<ItemType>().ToListAsync();
    }

    private async Task AddData()
    {
        var obj = new Coffee
        {
            Brand = _formModel.Brand,
            Name = _formModel.Name,
            Type = _formModel.ItemType!.Value,
            MinCaffeine = _formModel.MinCaffeine,
            MaxCaffeine = _formModel.MaxCaffeine
        };
        await Db.Insertable(obj).ExecuteCommandAsync();

        ResetForm();
        _ = PopupService.EnqueueSnackbarAsync("添加成功!", AlertTypes.Success, true, 3000);
        await GetData();
    }

    private async Task HandleDeleteDialogConfirm()
    {
        if (_singleDeleteId == null)
        {
            var ids = _selectedItems.Select(int.Parse).ToArray();
            await DeleteData(ids);
            _deleteDataDialogVisible = false;
            _selectedItems = [];
        }
        else
        {
            var list = _selectedItems.ToList();
            list.RemoveAll(x => x == _singleDeleteId.Value.ToString());
            _selectedItems = list;
            await DeleteData([_singleDeleteId.Value]);
            _deleteDataDialogVisible = false;
            _singleDeleteId = null;
        }
    }

    private async Task DeleteData(int[] ids)
    {
        if (ids.Length != 0)
        {
            await Db.Deleteable<Coffee>().Where(x => ids.Contains(x.Id)).ExecuteCommandAsync();
        }

        _ = PopupService.EnqueueSnackbarAsync($"删除成功! 已成功删除 {ids.Length} 条数据！", AlertTypes.Success, true, 3000);
        await GetData();
    }

    private async Task UpdateData()
    {
        var updateObj = new Coffee
        {
            Id = _formModel.Id,
            Brand = _formModel.Brand,
            Name = _formModel.Name,
            Type = _formModel.ItemType!.Value,
            MinCaffeine = _formModel.MinCaffeine,
            MaxCaffeine = _formModel.MaxCaffeine
        };
        await Db.Updateable(updateObj).ExecuteCommandAsync();
        ResetForm();
        await GetData();
        await PopupService.EnqueueSnackbarAsync("数据更新成功！", AlertTypes.Success, true, 3000);
    }

}